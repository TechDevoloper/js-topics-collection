callBack --
It is any function that passed as an argument to any other function and then invoked from within that function.

Example Interview Question:
Q: What is a callback function in JavaScript? Can you provide an example?

A: A callback function is a function that is passed as an argument to another function and is executed after some operation has been completed. Here is an example:

function fetchData(callback) {
    setTimeout(() => {
        console.log('Data fetched');
        callback();
    }, 1000);
}

function processData() {
    console.log('Processing data');
}

fetchData(processData);

Additional Interview Questions:
Q: What are the advantages of using callback functions in JavaScript?
A: Callback functions allow for asynchronous operations, improve code readability, and enable better handling of asynchronous events.

Q: Can you explain the difference between synchronous and asynchronous callbacks?
A: Synchronous callbacks are executed immediately, while asynchronous callbacks are executed after a certain event or operation is completed, allowing the program to continue running other tasks in the meantime.

Q: How can you avoid callback hell in JavaScript?
A: Callback hell can be avoided by using named functions, modularizing code, using Promises, or utilizing async/await syntax.

Q: Provide an example of a callback function used with an array method.
A: Here is an example using the `map` method:

const numbers = [1, 2, 3, 4, 5];
const doubled = numbers.map(function(number) {
    return number * 2;
});
console.log(doubled); // [2, 4, 6, 8, 10]



CallBack Hell----->
Callback Hell (also known as Pyramid of Doom) refers to the situation where you have nested multiple callback functions within each other, making your code difficult to read and maintain. This commonly happens in JavaScript when dealing with asynchronous operations, such as multiple API requests, file handling, or event handling.