A Promise in JavaScript is an object that represents the eventual completion (or failure) of an asynchronous operation and its resulting value. It allows you to handle asynchronous code in a more manageable and readable way compared to callbacks. Promises are a powerful tool for managing asynchronous tasks like fetching data, reading files, or making requests to APIs.

Promise States
A Promise can be in one of three states:

Pending: The initial state, where the operation is still ongoing.
Fulfilled: The operation was successful, and the promise has resolved with a value.
Rejected: The operation failed, and the promise has rejected with an error or reason.
Creating a Promise
You create a promise using the new Promise() constructor. It takes a executor function that has two parameters: resolve and reject.

resolve(value) is called if the promise is successful, and value is the result of the operation.
reject(error) is called if thereâ€™s an error, and error is the reason for failure.



Handling a Promise
Once a promise is created, you can handle its outcome using the .then(), .catch(), and .finally() methods.

.then(): Handles a fulfilled promise.
.catch(): Handles a rejected promise.

